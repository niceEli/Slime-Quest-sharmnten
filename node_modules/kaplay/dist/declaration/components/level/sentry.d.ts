import { Vec2 } from "../../math";
import type { Comp, GameObj, PosComp, QueryOpt } from "../../types";
import type { KEventController } from "../../utils";
/**
 * The {@link sentry `sentry()`} component.
 *
 * @group Component Types
 */
export interface SentryComp extends Comp {
    direction?: Vec2;
    directionAngle?: number;
    fieldOfView?: number;
    spotted: GameObj<any>[];
    onObjectsSpotted(cb: (objects: GameObj[]) => void): KEventController;
    isWithinFieldOfView(obj: GameObj<PosComp>, direction?: Vec2, fieldOfView?: number): boolean;
    hasLineOfSight(obj: GameObj<PosComp>): boolean;
}
/**
 * Options for the {@link sentry `sentry()`} component.
 *
 * @group Component Types
 */
export interface SentryCompOpt {
    direction?: Vec2 | number;
    fieldOfView?: number;
    lineOfSight?: boolean;
    raycastExclude?: string[];
    checkFrequency?: number;
}
export type SentryCandidatesCb = () => GameObj<any>[];
export type SentryCandidates = SentryCandidatesCb | QueryOpt;
export declare function sentry(candidates: SentryCandidates, opts?: SentryCompOpt): SentryComp;
//# sourceMappingURL=sentry.d.ts.map